using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

using System.IO;
using System.IO.Ports;
using AHRSInterface;

namespace Driver_ControlPanel_v1
{
    public partial class Form1 : Form
    {
        int SC_H, SC_W;
        double formWidth, formHeight;
        int SC_Height;
        public Form1()

        {
            InitializeComponent();
            initializeSerialPort();

            int i;  // index in for loop
            for ( i = 0; i < 7; i++)
                sensor[i] = new AHRS();

            // Event handlers
            for (i = 0; i < 7; i++)
            {
                sensor[i].PacketTimeoutEvent += new StateDelegate(TimeoutEventHandler);
                sensor[i].PacketReceivedEvent += new PacketDelegate(PacketReceivedEventHandler);
                sensor[i].DataReceivedEvent += new DataReceivedDelegate(DataReceivedEventHandler);
                sensor[i].PacketSentEvent += new PacketDelegate(PacketSentEventHandler);
                sensor[i].COMFailedEvent += new COMFailedDelegate(COMFailedEventHandler);
                sensor[i].PacketLabelEvent += new PacketLabel(PacketLabelHandler);                
            }

        }


        private void initializeSerialPort()
        {
            serialPort = new SerialPort();

            foreach (string s in SerialPort.GetPortNames())
            {
                serialPortCOMBox.Items.Add(s);
            }
            if (serialPortCOMBox.Items.Count == 0)
            {
                serialPortCOMBox.Items.Add("No Ports Avaliable");
                serialPortCOMBox.Enabled = false;
                serialConnectButton.Enabled = false;
            }

            serialPortCOMBox.SelectedIndex = 0;
          
            baudSelectBox.Items.Add(4900000);
            baudSelectBox.Items.Add(5000000);

            baudSelectBox.SelectedIndex = 0;
        }


        // Variables Declaration
        AHRS[7] sensor;



        /* **********************************************************************************
         * 
         * Function: void TimeoutEventHandler
         * Inputs: PName packet_type, int flags
         * Outputs: None
         * Return Value: None
         * Dependencies: None
         * Description: 
         * 
         * Handles timeout events generated by the AHRS class - a timeout event occurs if the
         * AHRS class attempts to communicate with the AHRS device and receives no response.
         * 
         * *********************************************************************************/
        /*
        void TimeoutEventHandler(StateName packet_type, int flags)
        {
            string message;

            message = "Timeout: ";
            message += System.Enum.Format(typeof(StateName), packet_type, "G");
            message += "\r\n";

            //AppendStatusText(message, Color.Red);
        }
        */
        /*
        void COMFailedEventHandler()
        {
            //            AppendStatusText("Serial COM failed\r\n", Color.Red);
        }
        */
        /* **********************************************************************************
        * 
        * Function: void PacketReceivedEventHandler
        * Inputs: PName packet_type, int flags
        * Outputs: None
        * Return Value: None
        * Dependencies: None
        * Description: 
        * 
        * Handles PacketReceived events generated by the AHRS.
        * 
        * *********************************************************************************/
        void PacketReceivedEventHandler(PName packet_type, int flags)
        {
            string message;

            if (packet_type == PName.CMD_NO_SUPPORT)
            {
                message = "Command Failed: ";
                message += System.Enum.Format(typeof(PName), flags, "G");
                message += "\r\n";
            }
            else if (packet_type == PName.CMD_COMPLETE)
            {
                message = "Command Complete: ";
                message += System.Enum.Format(typeof(PName), flags, "G");
                message += "\r\n";
            }
            else if (packet_type == PName.CMD_CRC_FAILED)
            {
                if (flags == -1)
                {
                    message = "Device CRC Failed:: ";
                }
                else
                {
                    message = "Command CRC Failed:: ";
                }
                message += System.Enum.Format(typeof(PName), 0, "G");
                message += "\r\n";

            }
            else if (packet_type == PName.CMD_OVER_DATA_LENGTH)
            {
                if (flags == -1)
                {
                    message = "Device Over Data Length: ";
                }
                else
                {
                    message = "Command Over Data Length: ";
                }
                message += System.Enum.Format(typeof(PName), 0, "G");
                message += "\r\n";
            }
            else
            {
                message = "Received ";
                message += System.Enum.Format(typeof(PName), packet_type, "G");
                message += " packet\r\n";
            }

            //AppendStatusText(message, Color.Green);
        }

        /* **********************************************************************************
        * 
        * Function: void PacketSentEventHandler
        * Inputs: PName packet_type, int flags
        * Outputs: None
        * Return Value: None
        * Dependencies: None
        * Description: 
        * 
        * Handles PacketReceived events generated by the AHRS.
        * 
        * *********************************************************************************/
        void PacketSentEventHandler(PName packet_type, int flags)
        {
            string message;

            message = "Sent ";
            message += System.Enum.Format(typeof(PName), packet_type, "G");
            message += " packet\r\n";

           // AppendStatusText(message, Color.Blue);
        }

        /* **********************************************************************************
        * 
        * Function: void PacketLabelHandler
        * Inputs: byte[] data, int flags
        * Outputs: None
        * Return Value: None
        * Dependencies: None
        * Description: 
        * 
        * Handles PacketReceived events generated by the AHRS.
        * 
        * *********************************************************************************/
        /*
        void PacketLabelHandler(byte[] data, int flags)
        {
            string message;
            int i = data.Length;


            if (flags == 1)
            {

                message = "Model Name: ";
                for (i = 0; i < data.Length; i++)
                {
                    message += Convert.ToChar(data[i]);
                }
                //AppendLabel1Text(message);
            }
            else if (flags == 2)
            {
                message = "F/W Version: ";
                for (i = 0; i < data.Length; i++)
                {
                    message += Convert.ToChar(data[i]);
                }

                AppendLabel2Text(message);
            }
            else if (flags == 23)
            {
                message = "Sensor ADC: 0x";
                for (i = 0; i < (data.Length - 1); i++)
                {
                    message += data[i].ToString("X2");
                }

                AppendLabel23Text(message);
            }

            else
            {
                // to do something
            }

        }
        */
        /* **********************************************************************************
        * 
        * Function: void DataReceivedEventHandler
        * Inputs: None
        * Outputs: None
        * Return Value: None
        * Dependencies: None
        * Description: 
        * 
        * Handles DataReceived events generated by the AHRS object
        * 
        * *********************************************************************************/
       /*
        void DataReceivedEventHandler(int active_channels)
        {
            //time += timer1.Interval / 1000.0;
            if (sensor.Graph_Sketch == true)
            {
                time++;

                Pos_Tar_List.Add(time, sensor.Motor_Member[Motor_Channel].Position_Target);
                Pos_Motor_List.Add(time, sensor.Motor_Member[Motor_Channel].QEI32);

                Vel_Ext_List.Add(time, sensor.Motor_Member[Motor_Channel].Velocity_External);
                Vel_Int_List.Add(time, sensor.Motor_Member[Motor_Channel].Velocity_Internal);
                Vel_Motor_List.Add(time, sensor.Motor_Member[Motor_Channel].QEI_Diff16);

                Cur_Ext_List.Add(time, sensor.Motor_Member[Motor_Channel].Torque_External);
                Cur_Int_List.Add(time, sensor.Motor_Member[Motor_Channel].Torque_Internal);
                Cur_Motor_List.Add(time, sensor.Motor_Member[Motor_Channel].Motor_Current);

                refreshGraphs();
                DataReceivedbitStatus(sensor.Bit_Statis);//bit status grhp
            }
        }

        private void DataReceivedbitStatus(byte chstatus)
        {
            bool ptbit4, ptbit5, ptbit6, ptbit7;

            ptbit4 = Convert.ToBoolean(Convert.ToByte(sensor.Bit_Statis) & 0x10);
            ptbit5 = Convert.ToBoolean(Convert.ToByte(sensor.Bit_Statis) & 0x20);
            ptbit6 = Convert.ToBoolean(Convert.ToByte(sensor.Bit_Statis) & 0x40);
            ptbit7 = Convert.ToBoolean(Convert.ToByte(sensor.Bit_Statis) & 0x80);
            if (ptbit4)
                picbit4.BackColor = Color.GreenYellow;
            else
                picbit4.BackColor = Color.Red;
            if (ptbit5)
                picbit5.BackColor = Color.GreenYellow;
            else
                picbit5.BackColor = Color.Red;
            if (ptbit6)
                picbit6.BackColor = Color.GreenYellow;
            else
                picbit6.BackColor = Color.Red;
            if (ptbit7)
                picbit7.BackColor = Color.GreenYellow;
            else
                picbit7.BackColor = Color.Red;
        }

        */

 
    }
}
